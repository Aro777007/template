
#include <iostream>
#include <string>
using namespace std;

template <typename t>
class arrayy
{
    t* arr = nullptr;
    int size = 0;

public:

    arrayy(){}

    arrayy(int size)
    {
        this->size = size;
        arr = new int[size];
    }

    arrayy(const arrayy& obj)
    {
        this->size = obj.size;
        arr = new t[size];
    }

    t& operator =(const arrayy& obj)
    {
        if (this != &obj)
        {

            this->size = obj.size;
            arr = new t[size];
        }
        return*this;
    }

    arrayy(arrayy&& obj) noexcept  {
        size = obj.size;
        arr = obj.arr;
        obj.size = 0;
        obj.arr = nullptr;
    }


    arrayy& operator=(arrayy&& obj) noexcept 

    {
        if (this != &obj) {
            delete[] arr;
            size = obj.size;
            arr = obj.arr;
            obj.size = 0;
            obj.arr = nullptr;
        }
        return *this;
    }

    void get_element()
    {
        for (t i = 0; i < size; ++i)
        {
            arr[i] = 1;
        }

        for (t i = 0; i < size; ++i)
        {
            cout << arr[i];
        }
        cout << endl;
        cout << endl;
    }
    

    void push_back()
    {

        for (int h = 0; h < 3; ++h)
        {
            size += 1;
            for (t i = 0; i < size; ++i)
            {
                arr[i] = 1;
                cout << arr[i];
            }
            cout << endl;
        }
        cout << endl;
        cout << endl;
    }


    void pop_back()
    {
        for (int h = 0; h < 3; ++h)
        {
            size -= 1;
            for (t i = 0; i < size; ++i)
            {
                arr[i] = 1;
                cout << arr[i];
            }
            cout << endl;
        }
        cout << endl;
        cout << endl;
    }

    ~arrayy()
    {
        delete[] arr;
    }
};

int main()
{

    int size;
    cin >> size;
    arrayy<int> a(size);
    arrayy<int> obj1 = a;
    a.get_element();
    a.push_back();
    a.pop_back();
    arrayy<int> obj = std::move(a);
    arrayy<int> b;
    b = std::move(arrayy<int>(2));
    return 0;
}
